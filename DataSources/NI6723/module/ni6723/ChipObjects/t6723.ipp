// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___t6723_ipp___
#define ___t6723_ipp___

#ifndef ___t6723_h___
#include "t6723.h"
#endif

#include "nimdbg/trace.h"
inline void t6723::tReg8IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u8 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write8(offset, u8(value));
}
inline u8 t6723::tReg8IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u8 value;   if (s && s->isFatal()) return ~0;
   value = (u8)addrSpace.read8(offset);
   return value;
}

inline void t6723::tReg16IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u16 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write16(offset, u16(value));
}

inline u16 t6723::tReg16IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u16 value;   if (s && s->isFatal()) return ~0;
   value = (u16)addrSpace.read16(offset);
   return value;
}

inline void t6723::tReg32IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u32 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write32(offset, value);
}

inline u32 t6723::tReg32IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u32 value;   if (s && s->isFatal()) return ~0;
   value = addrSpace.read32(offset);
   return value;
}

inline tBusSpaceReference t6723::getBusSpaceReference(void) const
{
   return _addrSpace;
}

inline void t6723::setAddressOffset(u32 value, nMDBG::tStatus2* s)
{
   _addressOffset = value;
}
inline u32  t6723::getAddressOffset(nMDBG::tStatus2* s)
{
   return _addressOffset;
}
inline void t6723::flushBus(nMDBG::tStatus2* s)
{

}

inline t6723::tSerialCommand::tSerialCommand()
{
   _softCopy = 0;
}

inline t6723* t6723::tSerialCommand::registerMap(void)
{
   return _6723;
}

inline void t6723::tSerialCommand::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tSerialCommand& t6723::tSerialCommand::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u8 t6723::tSerialCommand::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tSerialCommand::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void t6723::tSerialCommand::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u8 t6723::tSerialCommand::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tSerialCommand& t6723::tSerialCommand::setSerialClock(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xfe) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tSerialCommand::getSerialClock(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xfe) >> 0x0);
}

inline void t6723::tSerialCommand::writeSerialClock(u8 fieldValue, nMDBG::tStatus2* s)
{
   setSerialClock(fieldValue, s);
   flush(s);
}
inline u8 t6723::tSerialCommand::readSerialClock(nMDBG::tStatus2* s)
{
   return getSerialClock(s);
}

inline t6723::tSerialCommand& t6723::tSerialCommand::setSerialData(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xfd) | (fieldValue << 0x1));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tSerialCommand::getSerialData(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xfd) >> 0x1);
}

inline void t6723::tSerialCommand::writeSerialData(u8 fieldValue, nMDBG::tStatus2* s)
{
   setSerialData(fieldValue, s);
   flush(s);
}
inline u8 t6723::tSerialCommand::readSerialData(nMDBG::tStatus2* s)
{
   return getSerialData(s);
}

inline t6723::tSerialCommand& t6723::tSerialCommand::setEEPromChipSelect(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xfb) | (fieldValue << 0x2));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tSerialCommand::getEEPromChipSelect(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xfb) >> 0x2);
}

inline void t6723::tSerialCommand::writeEEPromChipSelect(u8 fieldValue, nMDBG::tStatus2* s)
{
   setEEPromChipSelect(fieldValue, s);
   flush(s);
}
inline u8 t6723::tSerialCommand::readEEPromChipSelect(nMDBG::tStatus2* s)
{
   return getEEPromChipSelect(s);
}

inline t6723::tSerialCommand& t6723::tSerialCommand::setMiscControlLines(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0x7) | (fieldValue << 0x3));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tSerialCommand::getMiscControlLines(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0x7) >> 0x3);
}

inline void t6723::tSerialCommand::writeMiscControlLines(u8 fieldValue, nMDBG::tStatus2* s)
{
   setMiscControlLines(fieldValue, s);
   flush(s);
}
inline u8 t6723::tSerialCommand::readMiscControlLines(nMDBG::tStatus2* s)
{
   return getMiscControlLines(s);
}

inline void t6723::tSerialCommand::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tInitialization::tInitialization()
{
   _softCopy = 0;
}

inline t6723* t6723::tInitialization::registerMap(void)
{
   return _6723;
}

inline void t6723::tInitialization::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tInitialization& t6723::tInitialization::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u8 t6723::tInitialization::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tInitialization::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void t6723::tInitialization::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline void t6723::tInitialization::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u8 t6723::tInitialization::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tInitialization& t6723::tInitialization::setInitDone(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xfe) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tInitialization::getInitDone(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfe) >> 0x0);
}

inline void t6723::tInitialization::writeInitDone(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setInitDone(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tInitialization::readInitDone(nMDBG::tStatus2* s)
{
   refresh(s);
   return getInitDone(s);
}

inline void t6723::tInitialization::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tStatusReg::tStatusReg()
{
   _softCopy = 0;
}

inline t6723* t6723::tStatusReg::registerMap(void)
{
   return _6723;
}

inline t6723::tStatusReg& t6723::tStatusReg::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u8 t6723::tStatusReg::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tStatusReg::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u8 t6723::tStatusReg::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tStatusReg& t6723::tStatusReg::setPROMOUT(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xfe) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tStatusReg::getPROMOUT(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfe) >> 0x0);
}

inline tBoolean t6723::tStatusReg::readPROMOUT(nMDBG::tStatus2* s)
{
   refresh(s);
   return getPROMOUT(s);
}

inline t6723::tStatusReg& t6723::tStatusReg::setAOBusy(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xf7) | (fieldValue << 0x3));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tStatusReg::getAOBusy(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xf7) >> 0x3);
}

inline tBoolean t6723::tStatusReg::readAOBusy(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAOBusy(s);
}

inline t6723::tStatusReg& t6723::tStatusReg::setAOPFF(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xdf) | (fieldValue << 0x5));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tStatusReg::getAOPFF(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xdf) >> 0x5);
}

inline tBoolean t6723::tStatusReg::readAOPFF(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAOPFF(s);
}

inline t6723::tStatusReg& t6723::tStatusReg::setTempOut(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xbf) | (fieldValue << 0x6));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tStatusReg::getTempOut(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xbf) >> 0x6);
}

inline tBoolean t6723::tStatusReg::readTempOut(nMDBG::tStatus2* s)
{
   refresh(s);
   return getTempOut(s);
}

inline void t6723::tStatusReg::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tAOCalChanSel::tAOCalChanSel()
{
   _softCopy = 0;
}

inline t6723* t6723::tAOCalChanSel::registerMap(void)
{
   return _6723;
}

inline void t6723::tAOCalChanSel::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tAOCalChanSel& t6723::tAOCalChanSel::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u16 t6723::tAOCalChanSel::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tAOCalChanSel::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void t6723::tAOCalChanSel::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u16 t6723::tAOCalChanSel::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tAOCalChanSel& t6723::tAOCalChanSel::setCalChannel(u16 fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xffe0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u16 t6723::tAOCalChanSel::getCalChannel(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffe0) >> 0x0);
}

inline void t6723::tAOCalChanSel::writeCalChannel(u16 fieldValue, nMDBG::tStatus2* s)
{
   setCalChannel(fieldValue, s);
   flush(s);
}
inline u16 t6723::tAOCalChanSel::readCalChannel(nMDBG::tStatus2* s)
{
   return getCalChannel(s);
}

inline t6723::tAOCalChanSel& t6723::tAOCalChanSel::setCalRefSelect(tCalRefSelect fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xfcff) | (fieldValue << 0x8));
   setRegister(newValue, s);
   return *this;
}

inline t6723::tAOCalChanSel::tCalRefSelect t6723::tAOCalChanSel::getCalRefSelect(nMDBG::tStatus2*) const
{
   return (tCalRefSelect)((_softCopy & ~0xfcff) >> 0x8);
}

inline void t6723::tAOCalChanSel::writeCalRefSelect(tCalRefSelect fieldValue, nMDBG::tStatus2* s)
{
   setCalRefSelect(fieldValue, s);
   flush(s);
}
inline t6723::tAOCalChanSel::tCalRefSelect t6723::tAOCalChanSel::readCalRefSelect(nMDBG::tStatus2* s)
{
   return getCalRefSelect(s);
}

inline t6723::tAOCalChanSel& t6723::tAOCalChanSel::setCalRefEnable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tAOCalChanSel::getCalRefEnable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void t6723::tAOCalChanSel::writeCalRefEnable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setCalRefEnable(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tAOCalChanSel::readCalRefEnable(nMDBG::tStatus2* s)
{
   return getCalRefEnable(s);
}

inline t6723::tAOCalChanSel& t6723::tAOCalChanSel::setADCGainEnable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tAOCalChanSel::getADCGainEnable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void t6723::tAOCalChanSel::writeADCGainEnable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setADCGainEnable(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tAOCalChanSel::readADCGainEnable(nMDBG::tStatus2* s)
{
   return getADCGainEnable(s);
}

inline void t6723::tAOCalChanSel::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tADCCommand::tADCCommand()
{
   _softCopy = 0;
}

inline t6723* t6723::tADCCommand::registerMap(void)
{
   return _6723;
}

inline void t6723::tADCCommand::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tADCCommand& t6723::tADCCommand::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u16 t6723::tADCCommand::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tADCCommand::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffff7f);
}

inline void t6723::tADCCommand::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline void t6723::tADCCommand::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u16 t6723::tADCCommand::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tADCCommand& t6723::tADCCommand::setPowerSaveRunMode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tADCCommand::getPowerSaveRunMode(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void t6723::tADCCommand::writePowerSaveRunMode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setPowerSaveRunMode(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tADCCommand::readPowerSaveRunMode(nMDBG::tStatus2* s)
{
   refresh(s);
   return getPowerSaveRunMode(s);
}

inline t6723::tADCCommand& t6723::tADCCommand::setRegisterSelect(tRegisterSelect fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xfff1) | (fieldValue << 0x1));
   setRegister(newValue, s);
   return *this;
}

inline t6723::tADCCommand::tRegisterSelect t6723::tADCCommand::getRegisterSelect(nMDBG::tStatus2*) const
{
   return (tRegisterSelect)((_softCopy & ~0xfff1) >> 0x1);
}

inline void t6723::tADCCommand::writeRegisterSelect(tRegisterSelect fieldValue, nMDBG::tStatus2* s)
{
   setRegisterSelect(fieldValue, s);
   flush(s);
}
inline t6723::tADCCommand::tRegisterSelect t6723::tADCCommand::readRegisterSelect(nMDBG::tStatus2* s)
{
   refresh(s);
   return getRegisterSelect(s);
}

inline t6723::tADCCommand& t6723::tADCCommand::setDirection(tDirection fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
   setRegister(newValue, s);
   return *this;
}

inline t6723::tADCCommand::tDirection t6723::tADCCommand::getDirection(nMDBG::tStatus2*) const
{
   return (tDirection)((_softCopy & ~0xffef) >> 0x4);
}

inline void t6723::tADCCommand::writeDirection(tDirection fieldValue, nMDBG::tStatus2* s)
{
   setDirection(fieldValue, s);
   flush(s);
}
inline t6723::tADCCommand::tDirection t6723::tADCCommand::readDirection(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDirection(s);
}

inline t6723::tADCCommand& t6723::tADCCommand::setContinuousConversion(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tADCCommand::getContinuousConversion(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void t6723::tADCCommand::writeContinuousConversion(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setContinuousConversion(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tADCCommand::readContinuousConversion(nMDBG::tStatus2* s)
{
   refresh(s);
   return getContinuousConversion(s);
}

inline t6723::tADCCommand& t6723::tADCCommand::setStartConversion(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tADCCommand::getStartConversion(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void t6723::tADCCommand::writeStartConversion(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setStartConversion(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tADCCommand::readStartConversion(nMDBG::tStatus2* s)
{
   refresh(s);
   return getStartConversion(s);
}

inline t6723::tADCCommand& t6723::tADCCommand::setExecuteCommand(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tADCCommand::getExecuteCommand(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xff7f) >> 0x7);
}

inline void t6723::tADCCommand::writeExecuteCommand(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setExecuteCommand(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tADCCommand::readExecuteCommand(nMDBG::tStatus2* s)
{
   refresh(s);
   return getExecuteCommand(s);
}

inline void t6723::tADCCommand::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tADCStatus::tADCStatus()
{
   _softCopy = 0;
}

inline t6723* t6723::tADCStatus::registerMap(void)
{
   return _6723;
}

inline t6723::tADCStatus& t6723::tADCStatus::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u16 t6723::tADCStatus::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tADCStatus::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u16 t6723::tADCStatus::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tADCStatus& t6723::tADCStatus::setBusy(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tADCStatus::getBusy(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline tBoolean t6723::tADCStatus::readBusy(nMDBG::tStatus2* s)
{
   refresh(s);
   return getBusy(s);
}

inline t6723::tADCStatus& t6723::tADCStatus::setOscillationDetect(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tADCStatus::getOscillationDetect(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline tBoolean t6723::tADCStatus::readOscillationDetect(nMDBG::tStatus2* s)
{
   refresh(s);
   return getOscillationDetect(s);
}

inline t6723::tADCStatus& t6723::tADCStatus::setOverrange(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tADCStatus::getOverrange(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffb) >> 0x2);
}

inline tBoolean t6723::tADCStatus::readOverrange(nMDBG::tStatus2* s)
{
   refresh(s);
   return getOverrange(s);
}

inline void t6723::tADCStatus::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tADCConversionData16::tADCConversionData16()
{
   _softCopy = 0;
}

inline t6723* t6723::tADCConversionData16::registerMap(void)
{
   return _6723;
}

inline t6723::tADCConversionData16& t6723::tADCConversionData16::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u16 t6723::tADCConversionData16::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tADCConversionData16::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u16 t6723::tADCConversionData16::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tADCConversionData16& t6723::tADCConversionData16::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u16 t6723::tADCConversionData16::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 t6723::tADCConversionData16::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void t6723::tADCConversionData16::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tAOMisc::tAOMisc()
{
   _softCopy = 0;
}

inline t6723* t6723::tAOMisc::registerMap(void)
{
   return _6723;
}

inline void t6723::tAOMisc::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tAOMisc& t6723::tAOMisc::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u16 t6723::tAOMisc::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tAOMisc::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void t6723::tAOMisc::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline void t6723::tAOMisc::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u16 t6723::tAOMisc::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tAOMisc& t6723::tAOMisc::setAOUpdateMode(tAOUpdateMode fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xfff3) | (fieldValue << 0x2));
   setRegister(newValue, s);
   return *this;
}

inline t6723::tAOMisc::tAOUpdateMode t6723::tAOMisc::getAOUpdateMode(nMDBG::tStatus2*) const
{
   return (tAOUpdateMode)((_softCopy & ~0xfff3) >> 0x2);
}

inline void t6723::tAOMisc::writeAOUpdateMode(tAOUpdateMode fieldValue, nMDBG::tStatus2* s)
{
   setAOUpdateMode(fieldValue, s);
   flush(s);
}
inline t6723::tAOMisc::tAOUpdateMode t6723::tAOMisc::readAOUpdateMode(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAOUpdateMode(s);
}

inline t6723::tAOMisc& t6723::tAOMisc::setAOEnable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tAOMisc::getAOEnable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline void t6723::tAOMisc::writeAOEnable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAOEnable(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tAOMisc::readAOEnable(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAOEnable(s);
}

inline t6723::tAOMisc& t6723::tAOMisc::setAOCalDisable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tAOMisc::getAOCalDisable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xff7f) >> 0x7);
}

inline void t6723::tAOMisc::writeAOCalDisable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAOCalDisable(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tAOMisc::readAOCalDisable(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAOCalDisable(s);
}

inline t6723::tAOMisc& t6723::tAOMisc::setAltWFMMode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tAOMisc::getAltWFMMode(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfeff) >> 0x8);
}

inline void t6723::tAOMisc::writeAltWFMMode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAltWFMMode(fieldValue, s);
   flush(s);
}
inline tBoolean t6723::tAOMisc::readAltWFMMode(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAltWFMMode(s);
}

inline void t6723::tAOMisc::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tAOChanCount::tAOChanCount()
{
   _softCopy = 0;
}

inline t6723* t6723::tAOChanCount::registerMap(void)
{
   return _6723;
}

inline void t6723::tAOChanCount::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tAOChanCount& t6723::tAOChanCount::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u16 t6723::tAOChanCount::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tAOChanCount::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void t6723::tAOChanCount::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u16 t6723::tAOChanCount::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tAOChanCount& t6723::tAOChanCount::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xffc0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u16 t6723::tAOChanCount::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffc0) >> 0x0);
}

inline void t6723::tAOChanCount::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 t6723::tAOChanCount::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void t6723::tAOChanCount::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tDACFIFOFlags::tDACFIFOFlags()
{
   _softCopy = 0;
}

inline t6723* t6723::tDACFIFOFlags::registerMap(void)
{
   return _6723;
}

inline t6723::tDACFIFOFlags& t6723::tDACFIFOFlags::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u32 t6723::tDACFIFOFlags::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tDACFIFOFlags::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u32 t6723::tDACFIFOFlags::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tDACFIFOFlags& t6723::tDACFIFOFlags::setAO_FIFO_Empty_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0xfffffffe) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tDACFIFOFlags::getAO_FIFO_Empty_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffffe) >> 0x0);
}

inline tBoolean t6723::tDACFIFOFlags::readAO_FIFO_Empty_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_FIFO_Empty_St(s);
}

inline t6723::tDACFIFOFlags& t6723::tDACFIFOFlags::setAO_FIFO_Half_Full_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0xfffffffd) | (fieldValue << 0x1));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tDACFIFOFlags::getAO_FIFO_Half_Full_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffffd) >> 0x1);
}

inline tBoolean t6723::tDACFIFOFlags::readAO_FIFO_Half_Full_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_FIFO_Half_Full_St(s);
}

inline t6723::tDACFIFOFlags& t6723::tDACFIFOFlags::setAO_FIFO_Full_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0xfffffffb) | (fieldValue << 0x2));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tDACFIFOFlags::getAO_FIFO_Full_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffffb) >> 0x2);
}

inline tBoolean t6723::tDACFIFOFlags::readAO_FIFO_Full_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_FIFO_Full_St(s);
}

inline t6723::tDACFIFOFlags& t6723::tDACFIFOFlags::setAO_FIFO_Request_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0xfffffff7) | (fieldValue << 0x3));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean t6723::tDACFIFOFlags::getAO_FIFO_Request_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffff7) >> 0x3);
}

inline tBoolean t6723::tDACFIFOFlags::readAO_FIFO_Request_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_FIFO_Request_St(s);
}

inline t6723::tDACFIFOFlags& t6723::tDACFIFOFlags::setEmptyCount(u32 fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0xf800ffff) | (fieldValue << 0x10));
   setRegister(newValue, s);
   return *this;
}

inline u32 t6723::tDACFIFOFlags::getEmptyCount(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xf800ffff) >> 0x10);
}

inline u32 t6723::tDACFIFOFlags::readEmptyCount(nMDBG::tStatus2* s)
{
   refresh(s);
   return getEmptyCount(s);
}

inline void t6723::tDACFIFOFlags::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tFIFOData::tFIFOData()
{
   _softCopy = 0;
}

inline t6723* t6723::tFIFOData::registerMap(void)
{
   return _6723;
}

inline void t6723::tFIFOData::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tFIFOData& t6723::tFIFOData::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u32 t6723::tFIFOData::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tFIFOData::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void t6723::tFIFOData::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u32 t6723::tFIFOData::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tFIFOData& t6723::tFIFOData::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0xffffe000) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u32 t6723::tFIFOData::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffe000) >> 0x0);
}

inline void t6723::tFIFOData::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 t6723::tFIFOData::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void t6723::tFIFOData::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tDACDirty::tDACDirty()
{
   _softCopy = 0;
}

inline t6723* t6723::tDACDirty::registerMap(void)
{
   return _6723;
}

inline t6723::tDACDirty& t6723::tDACDirty::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u32 t6723::tDACDirty::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tDACDirty::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u32 t6723::tDACDirty::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tDACDirty& t6723::tDACDirty::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0x0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u32 t6723::tDACDirty::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 t6723::tDACDirty::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void t6723::tDACDirty::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tDACLastWriteBank::tDACLastWriteBank()
{
   _softCopy = 0;
}

inline t6723* t6723::tDACLastWriteBank::registerMap(void)
{
   return _6723;
}

inline t6723::tDACLastWriteBank& t6723::tDACLastWriteBank::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u32 t6723::tDACLastWriteBank::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tDACLastWriteBank::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u32 t6723::tDACLastWriteBank::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tDACLastWriteBank& t6723::tDACLastWriteBank::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0x0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u32 t6723::tDACLastWriteBank::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 t6723::tDACLastWriteBank::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void t6723::tDACLastWriteBank::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tFPGAVersion::tFPGAVersion()
{
   _softCopy = 0;
}

inline t6723* t6723::tFPGAVersion::registerMap(void)
{
   return _6723;
}

inline t6723::tFPGAVersion& t6723::tFPGAVersion::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u32 t6723::tFPGAVersion::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tFPGAVersion::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u32 t6723::tFPGAVersion::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tFPGAVersion& t6723::tFPGAVersion::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0x0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u32 t6723::tFPGAVersion::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 t6723::tFPGAVersion::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void t6723::tFPGAVersion::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tFPGACheck::tFPGACheck()
{
   _softCopy = 0;
}

inline t6723* t6723::tFPGACheck::registerMap(void)
{
   return _6723;
}

inline t6723::tFPGACheck& t6723::tFPGACheck::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u32 t6723::tFPGACheck::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tFPGACheck::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u32 t6723::tFPGACheck::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tFPGACheck& t6723::tFPGACheck::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0x0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u32 t6723::tFPGACheck::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 t6723::tFPGACheck::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void t6723::tFPGACheck::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tDirectData_t::tDirectData_t(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = 0;
}

inline t6723* t6723::tDirectData_t::registerMap(void)
{
   return _6723;
}

inline void t6723::tDirectData_t::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tDirectData_t& t6723::tDirectData_t::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u16 t6723::tDirectData_t::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tDirectData_t::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void t6723::tDirectData_t::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u16 t6723::tDirectData_t::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tDirectData_t& t6723::tDirectData_t::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xe000) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u16 t6723::tDirectData_t::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xe000) >> 0x0);
}

inline void t6723::tDirectData_t::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 t6723::tDirectData_t::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void t6723::tDirectData_t::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tCalibration_t::tCalibration_t(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = 0;
}

inline t6723* t6723::tCalibration_t::registerMap(void)
{
   return _6723;
}

inline void t6723::tCalibration_t::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tCalibration_t& t6723::tCalibration_t::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u32 t6723::tCalibration_t::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tCalibration_t::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void t6723::tCalibration_t::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u32 t6723::tCalibration_t::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tCalibration_t& t6723::tCalibration_t::setCalGain(u32 fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0xffffff00) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u32 t6723::tCalibration_t::getCalGain(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffff00) >> 0x0);
}

inline void t6723::tCalibration_t::writeCalGain(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCalGain(fieldValue, s);
   flush(s);
}
inline u32 t6723::tCalibration_t::readCalGain(nMDBG::tStatus2* s)
{
   return getCalGain(s);
}

inline t6723::tCalibration_t& t6723::tCalibration_t::setCalOffset(u32 fieldValue, nMDBG::tStatus2* s)
{
   u32 newValue;   newValue = (u32) ((_softCopy & 0xff00ffff) | (fieldValue << 0x10));
   setRegister(newValue, s);
   return *this;
}

inline u32 t6723::tCalibration_t::getCalOffset(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xff00ffff) >> 0x10);
}

inline void t6723::tCalibration_t::writeCalOffset(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCalOffset(fieldValue, s);
   flush(s);
}
inline u32 t6723::tCalibration_t::readCalOffset(nMDBG::tStatus2* s)
{
   return getCalOffset(s);
}

inline void t6723::tCalibration_t::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tLastWrite_t::tLastWrite_t(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = 0;
}

inline t6723* t6723::tLastWrite_t::registerMap(void)
{
   return _6723;
}

inline t6723::tLastWrite_t& t6723::tLastWrite_t::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u16 t6723::tLastWrite_t::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tLastWrite_t::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u16 t6723::tLastWrite_t::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tLastWrite_t& t6723::tLastWrite_t::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xe000) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u16 t6723::tLastWrite_t::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xe000) >> 0x0);
}

inline u16 t6723::tLastWrite_t::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void t6723::tLastWrite_t::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tAOWaveformGeneration::tAOWaveformGeneration()
{
   _softCopy = 0;
}

inline t6723* t6723::tAOWaveformGeneration::registerMap(void)
{
   return _6723;
}

inline void t6723::tAOWaveformGeneration::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tAOWaveformGeneration& t6723::tAOWaveformGeneration::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u16 t6723::tAOWaveformGeneration::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tAOWaveformGeneration::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void t6723::tAOWaveformGeneration::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u16 t6723::tAOWaveformGeneration::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tAOWaveformGeneration& t6723::tAOWaveformGeneration::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   u16 newValue;   newValue = (u16) ((_softCopy & 0xffe0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u16 t6723::tAOWaveformGeneration::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffe0) >> 0x0);
}

inline void t6723::tAOWaveformGeneration::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 t6723::tAOWaveformGeneration::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void t6723::tAOWaveformGeneration::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tAOSelect::tAOSelect()
{
   _softCopy = 0;
}

inline t6723* t6723::tAOSelect::registerMap(void)
{
   return _6723;
}

inline void t6723::tAOSelect::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tAOSelect& t6723::tAOSelect::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u8 t6723::tAOSelect::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tAOSelect::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void t6723::tAOSelect::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u8 t6723::tAOSelect::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tAOSelect& t6723::tAOSelect::setAOCH(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xf) | (fieldValue << 0x4));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tAOSelect::getAOCH(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf) >> 0x4);
}

inline void t6723::tAOSelect::writeAOCH(u8 fieldValue, nMDBG::tStatus2* s)
{
   setAOCH(fieldValue, s);
   flush(s);
}
inline u8 t6723::tAOSelect::readAOCH(nMDBG::tStatus2* s)
{
   return getAOCH(s);
}

inline void t6723::tAOSelect::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tG0G1_Select::tG0G1_Select()
{
   _softCopy = 0;
}

inline t6723* t6723::tG0G1_Select::registerMap(void)
{
   return _6723;
}

inline void t6723::tG0G1_Select::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tG0G1_Select& t6723::tG0G1_Select::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u8 t6723::tG0G1_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tG0G1_Select::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void t6723::tG0G1_Select::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u8 t6723::tG0G1_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tG0G1_Select& t6723::tG0G1_Select::setG0(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xf0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tG0G1_Select::getG0(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf0) >> 0x0);
}

inline void t6723::tG0G1_Select::writeG0(u8 fieldValue, nMDBG::tStatus2* s)
{
   setG0(fieldValue, s);
   flush(s);
}
inline u8 t6723::tG0G1_Select::readG0(nMDBG::tStatus2* s)
{
   return getG0(s);
}

inline t6723::tG0G1_Select& t6723::tG0G1_Select::setG1(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0xf) | (fieldValue << 0x4));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tG0G1_Select::getG1(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf) >> 0x4);
}

inline void t6723::tG0G1_Select::writeG1(u8 fieldValue, nMDBG::tStatus2* s)
{
   setG1(fieldValue, s);
   flush(s);
}
inline u8 t6723::tG0G1_Select::readG1(nMDBG::tStatus2* s)
{
   return getG1(s);
}

inline void t6723::tG0G1_Select::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tELCSet::tELCSet()
{
   _softCopy = 0;
}

inline t6723* t6723::tELCSet::registerMap(void)
{
   return _6723;
}

inline void t6723::tELCSet::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tELCSet& t6723::tELCSet::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u8 t6723::tELCSet::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tELCSet::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void t6723::tELCSet::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u8 t6723::tELCSet::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tELCSet& t6723::tELCSet::set(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0x0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tELCSet::get(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0x0) >> 0x0);
}

inline void t6723::tELCSet::write(u8 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u8 t6723::tELCSet::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void t6723::tELCSet::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tELCStatus::tELCStatus()
{
   _softCopy = 0;
}

inline t6723* t6723::tELCStatus::registerMap(void)
{
   return _6723;
}

inline t6723::tELCStatus& t6723::tELCStatus::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u8 t6723::tELCStatus::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tELCStatus::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), s);
}

inline u8 t6723::tELCStatus::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline t6723::tELCStatus& t6723::tELCStatus::set(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0x0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tELCStatus::get(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0x0) >> 0x0);
}

inline u8 t6723::tELCStatus::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void t6723::tELCStatus::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

inline t6723::tELCAck::tELCAck()
{
   _softCopy = 0;
}

inline t6723* t6723::tELCAck::registerMap(void)
{
   return _6723;
}

inline void t6723::tELCAck::flushBus(nMDBG::tStatus2* s)
{
   _6723->flushBus(s);
}

inline t6723::tELCAck& t6723::tELCAck::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
   _softCopy = fieldValue;
   return *this;
}

inline u8 t6723::tELCAck::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void t6723::tELCAck::flush(nMDBG::tStatus2* s)
{
   tIOStrategy::write(_6723->getBusSpaceReference(), kOffset + _6723->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void t6723::tELCAck::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   _softCopy = fieldValue;
   flush(s);
}

inline u8 t6723::tELCAck::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline t6723::tELCAck& t6723::tELCAck::set(u8 fieldValue, nMDBG::tStatus2* s)
{
   u8 newValue;   newValue = (u8) ((_softCopy & 0x0) | (fieldValue << 0x0));
   setRegister(newValue, s);
   return *this;
}

inline u8 t6723::tELCAck::get(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0x0) >> 0x0);
}

inline void t6723::tELCAck::write(u8 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u8 t6723::tELCAck::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void t6723::tELCAck::setRegisterMap(t6723* p6723)
{
   _6723 = p6723;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

