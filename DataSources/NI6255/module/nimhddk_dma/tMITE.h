// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tMITE_h___
#define ___tMITE_h___

// includes
#ifndef ___nimdbg_tStatus2_h___
#include "nimdbg/tStatus2.h"
#endif

#include "osiBus.h"

class tMITE
{
public:
   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);
      
      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };
   
   //---------------------------------------------------------------------------
   // ChannelOperation
   //---------------------------------------------------------------------------
   class tChannelOperation : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x0,
         kId     = 0
      };
      tChannelOperation();


      typedef enum {
         kRegisterId                          = 0,
         kStartId                             = 1,
         kContId                              = 2,
         kStopId                              = 3,
         kAbortId                             = 4,
         kFResetId                            = 5,
         kClrRBId                             = 7,
         kClrDoneId                           = 8,
         kDmaResetId                          = 10
      } tId;

      inline tMITE* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tChannelOperation& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tChannelOperation& setStart(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getStart(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeStart(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readStart(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelOperation& setCont(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getCont(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeCont(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readCont(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelOperation& setStop(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getStop(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeStop(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readStop(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelOperation& setAbort(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getAbort(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeAbort(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readAbort(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelOperation& setFReset(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getFReset(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeFReset(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readFReset(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelOperation& setClrRB(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getClrRB(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeClrRB(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readClrRB(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelOperation& setClrDone(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getClrDone(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeClrDone(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readClrDone(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelOperation& setDmaReset(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDmaReset(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDmaReset(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readDmaReset(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // ChannelControl
   //---------------------------------------------------------------------------
   class tChannelControl : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x4,
         kId     = 1
      };
      tChannelControl();


      typedef enum {
         kRegisterId                          = 0,
         kXModeId                             = 1,
         kDirId                               = 2,
         kBurstEnableId                       = 4,
         kClrContinueIEId                     = 6,
         kSetContinueIEId                     = 7,
         kClrDoneIEId                         = 9,
         kSetDoneIEId                         = 10,
         kClrDmaIEId                          = 12,
         kSetDmaIEId                          = 13
      } tId;

      inline tMITE* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tChannelControl& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tChannelControl& setXMode(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getXMode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeXMode(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readXMode(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelControl& setDir(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDir(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDir(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readDir(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelControl& setBurstEnable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getBurstEnable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeBurstEnable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readBurstEnable(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelControl& setClrContinueIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getClrContinueIE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeClrContinueIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readClrContinueIE(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelControl& setSetContinueIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getSetContinueIE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSetContinueIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readSetContinueIE(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelControl& setClrDoneIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getClrDoneIE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeClrDoneIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readClrDoneIE(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelControl& setSetDoneIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getSetDoneIE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSetDoneIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readSetDoneIE(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelControl& setClrDmaIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getClrDmaIE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeClrDmaIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readClrDmaIE(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelControl& setSetDmaIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getSetDmaIE(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeSetDmaIE(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readSetDmaIE(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // ChannelStatus
   //---------------------------------------------------------------------------
   class tChannelStatus : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x3c,
         kId     = 2
      };
      tChannelStatus();


      typedef enum {
         kRegisterId                          = 0,
         kDeviceErrId                         = 1,
         kMemoryErrId                         = 2,
         kTransferErrId                       = 4,
         kOperationErrId                      = 5,
         kStoppedStatusId                     = 6,
         kSoftwareAbortId                     = 8,
         kErrorId                             = 9,
         kContinueStatusId                    = 11,
         kDmaDoneId                           = 13,
         kInterruptingId                      = 15
      } tId;

      inline tMITE* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tChannelStatus& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tChannelStatus& setDeviceErr(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDeviceErr(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDeviceErr(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelStatus& setMemoryErr(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getMemoryErr(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readMemoryErr(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelStatus& setTransferErr(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getTransferErr(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readTransferErr(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelStatus& setOperationErr(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getOperationErr(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readOperationErr(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelStatus& setStoppedStatus(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getStoppedStatus(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readStoppedStatus(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelStatus& setSoftwareAbort(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getSoftwareAbort(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readSoftwareAbort(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelStatus& setError(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getError(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readError(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelStatus& setContinueStatus(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getContinueStatus(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readContinueStatus(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelStatus& setDmaDone(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDmaDone(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDmaDone(nMDBG::tStatus2* statusChain = NULL);

      inline tChannelStatus& setInterrupting(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getInterrupting(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readInterrupting(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // BaseCount
   //---------------------------------------------------------------------------
   class tBaseCount : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x2c,
         kId     = 3
      };
      tBaseCount();


      typedef enum {
         kRegisterId                          = 0,
         kValueId                             = 1
      } tId;

      inline tMITE* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tBaseCount& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tBaseCount& setValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // TransferCount
   //---------------------------------------------------------------------------
   class tTransferCount : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x8,
         kId     = 4
      };
      tTransferCount();


      typedef enum {
         kRegisterId                          = 0,
         kValueId                             = 1
      } tId;

      inline tMITE* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tTransferCount& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tTransferCount& setValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // FifoCount
   //---------------------------------------------------------------------------
   class tFifoCount : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x40,
         kId     = 5
      };
      tFifoCount();


      typedef enum {
         kRegisterId                          = 0,
         kFifoCRId                            = 1,
         kEmptyCRId                           = 3
      } tId;

      inline tMITE* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tFifoCount& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tFifoCount& setFifoCR(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getFifoCR(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readFifoCR(nMDBG::tStatus2* statusChain = NULL);

      inline tFifoCount& setEmptyCR(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getEmptyCR(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readEmptyCR(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // MemoryConfig
   //---------------------------------------------------------------------------
   class tMemoryConfig : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0xc,
         kId     = 6
      };
      tMemoryConfig();


      typedef enum {
         kRegisterId                          = 0,
         kPortSizeId                          = 2
      } tId;

      inline tMITE* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tMemoryConfig& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tMemoryConfig& setPortSize(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPortSize(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePortSize(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readPortSize(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // DeviceConfig
   //---------------------------------------------------------------------------
   class tDeviceConfig : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x14,
         kId     = 7
      };
      tDeviceConfig();


      typedef enum {
         kRegisterId                          = 0,
         kPortSizeId                          = 2,
         kReqSourceId                         = 4
      } tId;

      inline tMITE* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDeviceConfig& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDeviceConfig& setPortSize(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPortSize(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePortSize(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readPortSize(nMDBG::tStatus2* statusChain = NULL);

      inline tDeviceConfig& setReqSource(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getReqSource(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeReqSource(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readReqSource(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // BaseAddress
   //---------------------------------------------------------------------------
   class tBaseAddress : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x28,
         kId     = 8
      };
      tBaseAddress();


      typedef enum {
         kRegisterId                          = 0,
         kValueId                             = 1
      } tId;

      inline tMITE* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tBaseAddress& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tBaseAddress& setValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // MemoryAddress
   //---------------------------------------------------------------------------
   class tMemoryAddress : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x10,
         kId     = 9
      };
      tMemoryAddress();


      typedef enum {
         kRegisterId                          = 0,
         kValueId                             = 1
      } tId;

      inline tMITE* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tMemoryAddress& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tMemoryAddress& setValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // DeviceAddress
   //---------------------------------------------------------------------------
   class tDeviceAddress : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;

      enum {
         kOffset = 0x18,
         kId     = 10
      };
      tDeviceAddress();


      typedef enum {
         kRegisterId                          = 0,
         kValueId                             = 1
      } tId;

      inline tMITE* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDeviceAddress& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDeviceAddress& setValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tMITE* pMITE);
      tMITE* _MITE;

      friend class tMITE;

   };

   //---------------------------------------------------------------------------
   // ChannelOperation
   //---------------------------------------------------------------------------
   tChannelOperation ChannelOperation;

   //---------------------------------------------------------------------------
   // ChannelControl
   //---------------------------------------------------------------------------
   tChannelControl ChannelControl;

   //---------------------------------------------------------------------------
   // ChannelStatus
   //---------------------------------------------------------------------------
   tChannelStatus ChannelStatus;

   //---------------------------------------------------------------------------
   // BaseCount
   //---------------------------------------------------------------------------
   tBaseCount BaseCount;

   //---------------------------------------------------------------------------
   // TransferCount
   //---------------------------------------------------------------------------
   tTransferCount TransferCount;

   //---------------------------------------------------------------------------
   // FifoCount
   //---------------------------------------------------------------------------
   tFifoCount FifoCount;

   //---------------------------------------------------------------------------
   // MemoryConfig
   //---------------------------------------------------------------------------
   tMemoryConfig MemoryConfig;

   //---------------------------------------------------------------------------
   // DeviceConfig
   //---------------------------------------------------------------------------
   tDeviceConfig DeviceConfig;

   //---------------------------------------------------------------------------
   // BaseAddress
   //---------------------------------------------------------------------------
   tBaseAddress BaseAddress;

   //---------------------------------------------------------------------------
   // MemoryAddress
   //---------------------------------------------------------------------------
   tMemoryAddress MemoryAddress;

   //---------------------------------------------------------------------------
   // DeviceAddress
   //---------------------------------------------------------------------------
   tDeviceAddress DeviceAddress;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kChannelOperationId                  = 0,
      kStartId                             = tChannelOperation::kStartId << 27 | kChannelOperationId,
      kContId                              = tChannelOperation::kContId << 27 | kChannelOperationId,
      kStopId                              = tChannelOperation::kStopId << 27 | kChannelOperationId,
      kAbortId                             = tChannelOperation::kAbortId << 27 | kChannelOperationId,
      kFResetId                            = tChannelOperation::kFResetId << 27 | kChannelOperationId,
      kClrRBId                             = tChannelOperation::kClrRBId << 27 | kChannelOperationId,
      kClrDoneId                           = tChannelOperation::kClrDoneId << 27 | kChannelOperationId,
      kDmaResetId                          = tChannelOperation::kDmaResetId << 27 | kChannelOperationId,

      kChannelControlId                    = 1,
      kXModeId                             = tChannelControl::kXModeId << 27 | kChannelControlId,
      kDirId                               = tChannelControl::kDirId << 27 | kChannelControlId,
      kBurstEnableId                       = tChannelControl::kBurstEnableId << 27 | kChannelControlId,
      kClrContinueIEId                     = tChannelControl::kClrContinueIEId << 27 | kChannelControlId,
      kSetContinueIEId                     = tChannelControl::kSetContinueIEId << 27 | kChannelControlId,
      kClrDoneIEId                         = tChannelControl::kClrDoneIEId << 27 | kChannelControlId,
      kSetDoneIEId                         = tChannelControl::kSetDoneIEId << 27 | kChannelControlId,
      kClrDmaIEId                          = tChannelControl::kClrDmaIEId << 27 | kChannelControlId,
      kSetDmaIEId                          = tChannelControl::kSetDmaIEId << 27 | kChannelControlId,

      kChannelStatusId                     = 2,
      kDeviceErrId                         = tChannelStatus::kDeviceErrId << 27 | kChannelStatusId,
      kMemoryErrId                         = tChannelStatus::kMemoryErrId << 27 | kChannelStatusId,
      kTransferErrId                       = tChannelStatus::kTransferErrId << 27 | kChannelStatusId,
      kOperationErrId                      = tChannelStatus::kOperationErrId << 27 | kChannelStatusId,
      kStoppedStatusId                     = tChannelStatus::kStoppedStatusId << 27 | kChannelStatusId,
      kSoftwareAbortId                     = tChannelStatus::kSoftwareAbortId << 27 | kChannelStatusId,
      kErrorId                             = tChannelStatus::kErrorId << 27 | kChannelStatusId,
      kContinueStatusId                    = tChannelStatus::kContinueStatusId << 27 | kChannelStatusId,
      kDmaDoneId                           = tChannelStatus::kDmaDoneId << 27 | kChannelStatusId,
      kInterruptingId                      = tChannelStatus::kInterruptingId << 27 | kChannelStatusId,

      kBaseCountId                         = 3,
      kBaseCounterValueId                             = tBaseCount::kValueId << 27 | kBaseCountId,

      kTransferCountId                     = 4,
      kTransferCounterValueId                             = tTransferCount::kValueId << 27 | kTransferCountId,

      kFifoCountId                         = 5,
      kFifoCRId                            = tFifoCount::kFifoCRId << 27 | kFifoCountId,
      kEmptyCRId                           = tFifoCount::kEmptyCRId << 27 | kFifoCountId,

      kMemoryConfigId                      = 6,
      kMemoryConfigPortSizeId                          = tMemoryConfig::kPortSizeId << 27 | kMemoryConfigId,

      kDeviceConfigId                      = 7,
      kDeviceConfigPortSizeId                          = tDeviceConfig::kPortSizeId << 27 | kDeviceConfigId,
      kDeviceConfigReqSourceId                         = tDeviceConfig::kReqSourceId << 27 | kDeviceConfigId,

      kBaseAddressId                       = 8,
      kBaseAddressValueId                             = tBaseAddress::kValueId << 27 | kBaseAddressId,

      kMemoryAddressId                     = 9,
      kMemoryAddressValueId                             = tMemoryAddress::kValueId << 27 | kMemoryAddressId,

      kDeviceAddressId                     = 10,
      kDeviceAddressValueId                             = tDeviceAddress::kValueId << 27 | kDeviceAddressId,


      kMaxRegisterId = 10

   } tId;

   tMITE(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tMITE();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline void flushBus(nMDBG::tStatus2* statusChain = NULL);
private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   tBoolean _deallocateBus;
   u32 _addressOffset;

};

#ifndef ___tMITE_ipp___
#ifndef ___tMITE_h_no_inline___
#include "tMITE.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

