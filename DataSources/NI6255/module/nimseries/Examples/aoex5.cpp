//
//  aoex4.cpp --
//
//      multi-channel hardware timed generation using DMA
//
//  $DateTime: 2006/10/24 23:40:45 $
//
#include <stdio.h>

#ifndef ___tMSeries_h___
 #include "tMSeries.h"
#endif

#ifndef ___ao_h___
 #include "ao.h"
#endif 

#ifndef ___common_h___
 #include "common.h"
#endif

#ifndef ___scale_h___
 #include "scale.h"
#endif

#include "nimhddk_dma/tMITE.h"
#include "nimhddk_dma/tDMAChannel.h"

const u32 sineWaveDateSize = 1000; 
extern const f32 sineWaveData[];
    
void test(iBus *bus)
{
    tBoolean continuous = kFalse; 
    tBoolean fifoRetransmit = kFalse; 
    u32 updatePeriodDivisor = 2000; 
    u32 numberOfChannels = 2; 
    u32 numberOfSamples  = sineWaveDateSize; 
        
    //  read eeprom for calibration information
    
    const u32 kEepromSize = 1024;
    u8 eepromMemory[kEepromSize];
    eepromReadMSeries (bus, eepromMemory, kEepromSize);   

    // create register maps
    
    tAddressSpace  bar0;
    tAddressSpace  bar1;
    tMITE *mite;
    tMSeries *board;
   
    bar0 = bus->createAddressSpace(kPCI_BAR0);
    bar1 = bus->createAddressSpace(kPCI_BAR1);
    mite = new tMITE(bar0);
    board = new tMSeries(bar1);

    //
    // DMA objects
    //
    tDMAChannel *dma;
    mite->setAddressOffset(0x600);
    dma = new tDMAChannel(bus, mite);
    
    //
    // Specify DMA buffer sizes
    //
    tDMAError status = kNoError; 
    
    const u32 dmaSizeInSamples = numberOfSamples * numberOfChannels; 
    const u32 dmaSizeInBytes   = dmaSizeInSamples * sizeof(i16); 

    i16 *rawData = new i16[dmaSizeInSamples];
    
    //s
    // ---- AO Reset ----
    // 
    
    configureTimebase (board);
    pllReset (board);
    analogTriggerReset (board);
    
    aoReset (board);
    aoPersonalize (board);
    aoResetWaveformChannels (board);
    aoClearFifo (board);
    
    // unground AO reference
    board->AO_Calibration.writeAO_RefGround (kFalse);
        
    // ---- End of AO Reset ----
    
    // ---- Write to DMA buffer ----
    
    tScalingCoefficients scale0;
    tScalingCoefficients scale1;

    aoGetScalingCoefficients (eepromMemory, 0, 0, 0, &scale0);    
    aoGetScalingCoefficients (eepromMemory, 0, 0, 1, &scale1);    
    
    for (u32 i = 0; i < numberOfSamples; ++i)
    {
        i32 rawValue; 
        f32 scaledValueCh0 = sineWaveData[i]; 
        f32 scaledValueCh1 = sineWaveData[i] * 2.0; 
        
        // channel 0
        aoLinearScaler (&rawValue, &scaledValueCh0, &scale0);
        rawData[(i * 2)]     = (i16)rawValue;
        
        // channel 1
        aoLinearScaler (&rawValue, &scaledValueCh1, &scale1);
        rawData[(i * 2) + 1] = (i16)rawValue;

    }

    // ---- Start A0 Task ---
    
    aoConfigureDAC (board, 
                     0, 
                     0,  //wavefrom order
                     tMSeries::tAO_Config_Bank::kAO_DAC_PolarityBipolar,
                     tMSeries::tAO_Config_Bank::kAO_Update_ModeTimed);
    aoConfigureDAC (board, 
                     1, 
                     1,  //wavefrom order
                     tMSeries::tAO_Config_Bank::kAO_DAC_PolarityBipolar,
                     tMSeries::tAO_Config_Bank::kAO_Update_ModeTimed);
    
    aoChannelSelect (board, 2);
    aoTrigger (board, 
               tMSeries::tAO_Trigger_Select::kAO_START1_SelectPulse,
               tMSeries::tAO_Trigger_Select::kAO_START1_PolarityRising_Edge);
    aoCount (board, numberOfSamples, 1, continuous);
    aoUpdate (board, 
              tMSeries::tAO_Mode_1::kAO_UPDATE_Source_SelectUI_TC, 
              tMSeries::tAO_Mode_1::kAO_UPDATE_Source_PolarityRising_Edge, 
              updatePeriodDivisor);
    aoFifoMode (board, fifoRetransmit);
    aoStop (board);
    
    //
    // Configure DMA Channel - request line: 1 => DMA Channel on the MSeries device: 2
    //
    status = dma->config (1, tDMAChannel::kNormal, tDMAChannel::kOut, dmaSizeInBytes, tDMAChannel::k16bit);
    if (status != kNoError)
    {
        printf("dma->config error\n");
    }    
    
    //
    // Select the DMA Channel in the device and enable FIFO request
    //
    board->AO_START_Select.writeAO_AOFREQ_Enable(1);
    board->AI_AO_Select.writeAO_DMA_Select (2);

    //
    // Copy data to DMA Buffer
    //
    u32 bytesFreeInBuffer = 0;
    
    // Use tDMAChannel::write passing a NULL buffer to get the number of sample
    // dma->write(NULL, NULL, &bytesFreeInBuffer); 
    // printf("bytesLeftInBuffer: %d\n", bytesFreeInBuffer);
    
    status = dma->write(sizeof(i16) * numberOfSamples * numberOfChannels, (u8 *)rawData, &bytesFreeInBuffer);
    if (status != kNoError)
    {
        printf("dma->write error\n");
    }

    //
    // Start the DMA process
    //
    //      The DMA process will start moving data even if the timing engine is not started, it's
    //  only controlled by the FIFO request flag, which is set to request to less-than-full in
    //  aoFifoMode().
    //
    status = dma->start();
    if (status != kNoError)
    {
        printf("dma->start error\n");
    }
    else
    {
        //
        // Start the AO Timing engine
        //
        aoArm (board);
        aoStart (board);
    }
    
    // ---- Wait for task to complete ----
    
    tBoolean stop = kFalse; 
    
    while (!stop && status == kNoError)
    {
        if (board->AO_Status_1.readAO_Overrun_St())
        {
            printf ("FIFO overrun error\n");
            stop = kTrue; 
        }
        
        if (!board->AO_Status_2.readAO_BC_Armed_St())
        {
            printf ("AO task stopped normally\n");
            stop = kTrue; 
        }  
    }

    // ---- Stop ---- 
    
    aoDisarm (board);    
    
    //
    // Disable DMA channel and FIFO request
    //
    board->AO_START_Select.writeAO_AOFREQ_Enable(0);
    board->AI_AO_Select.writeAO_DMA_Select (0);
    dma->stop();
    dma->reset(); // deallocate DMA buffer
    
    // reset the dacs
    aoConfigureDAC (board, 
                     0, 
                     0xF, 
                     tMSeries::tAO_Config_Bank::kAO_DAC_PolarityBipolar,
                     tMSeries::tAO_Config_Bank::kAO_Update_ModeImmediate);
    aoConfigureDAC (board, 
                     1, 
                     0xF, 
                     tMSeries::tAO_Config_Bank::kAO_DAC_PolarityBipolar,
                     tMSeries::tAO_Config_Bank::kAO_Update_ModeImmediate);
    

    
    // cleanup
    delete dma;
    delete mite;
    delete board;
    bus->destroyAddressSpace(bar1);
    bus->destroyAddressSpace(bar0);

    return; 
} 


const f32 sineWaveData[sineWaveDateSize] =
{
   0.000000, 0.012566, 0.025132, 0.037697, 0.050260, 0.062822, 0.075380, 0.087936, 0.100489, 0.113037, 
   0.125581, 0.138120, 0.150654, 0.163181, 0.175702, 0.188217, 0.200723, 0.213222, 0.225713, 0.238194, 
   0.250666, 0.263129, 0.275581, 0.288022, 0.300451, 0.312869, 0.325274, 0.337667, 0.350046, 0.362412, 
   0.374763, 0.387099, 0.399420, 0.411725, 0.424014, 0.436286, 0.448542, 0.460779, 0.472998, 0.485198, 
   0.497380, 0.509541, 0.521683, 0.533804, 0.545904, 0.557982, 0.570039, 0.582072, 0.594083, 0.606071, 
   0.618034, 0.629973, 0.641887, 0.653776, 0.665639, 0.677476, 0.689286, 0.701069, 0.712824, 0.724551, 
   0.736249, 0.747918, 0.759558, 0.771168, 0.782747, 0.794296, 0.805813, 0.817298, 0.828751, 0.840171, 
   0.851559, 0.862912, 0.874232, 0.885516, 0.896766, 0.907981, 0.919160, 0.930302, 0.941408, 0.952476, 
   0.963507, 0.974500, 0.985455, 0.996370, 1.007246, 1.018083, 1.028879, 1.039635, 1.050349, 1.061022, 
   1.071654, 1.082243, 1.092789, 1.103292, 1.113751, 1.124167, 1.134538, 1.144864, 1.155145, 1.165381, 
   1.175571, 1.185714, 1.195810, 1.205859, 1.215861, 1.225814, 1.235719, 1.245576, 1.255383, 1.265140, 
   1.274848, 1.284505, 1.294112, 1.303667, 1.313172, 1.322624, 1.332024, 1.341371, 1.350666, 1.359907, 
   1.369094, 1.378228, 1.387307, 1.396331, 1.405300, 1.414214, 1.423071, 1.431873, 1.440618, 1.449306, 
   1.457937, 1.466511, 1.475026, 1.483484, 1.491882, 1.500222, 1.508503, 1.516724, 1.524885, 1.532986, 
   1.541026, 1.549006, 1.556925, 1.564782, 1.572577, 1.580310, 1.587981, 1.595589, 1.603134, 1.610616, 
   1.618034, 1.625388, 1.632679, 1.639904, 1.647065, 1.654161, 1.661192, 1.668157, 1.675056, 1.681889, 
   1.688656, 1.695356, 1.701989, 1.708555, 1.715053, 1.721484, 1.727847, 1.734141, 1.740368, 1.746525, 
   1.752613, 1.758633, 1.764582, 1.770463, 1.776273, 1.782013, 1.787683, 1.793282, 1.798811, 1.804268, 
   1.809654, 1.814969, 1.820212, 1.825383, 1.830482, 1.835509, 1.840464, 1.845345, 1.850154, 1.854890, 
   1.859553, 1.864142, 1.868658, 1.873100, 1.877468, 1.881762, 1.885981, 1.890126, 1.894197, 1.898192, 
   1.902113, 1.905959, 1.909729, 1.913424, 1.917044, 1.920587, 1.924055, 1.927447, 1.930763, 1.934003, 
   1.937166, 1.940253, 1.943263, 1.946197, 1.949054, 1.951834, 1.954536, 1.957162, 1.959710, 1.962181, 
   1.964575, 1.966890, 1.969129, 1.971289, 1.973372, 1.975377, 1.977303, 1.979152, 1.980923, 1.982615, 
   1.984229, 1.985765, 1.987223, 1.988602, 1.989902, 1.991124, 1.992267, 1.993332, 1.994318, 1.995225, 
   1.996053, 1.996803, 1.997474, 1.998066, 1.998579, 1.999013, 1.999368, 1.999645, 1.999842, 1.999961, 
   2.000000, 1.999961, 1.999842, 1.999645, 1.999368, 1.999013, 1.998579, 1.998066, 1.997474, 1.996803, 
   1.996053, 1.995225, 1.994318, 1.993332, 1.992267, 1.991124, 1.989902, 1.988602, 1.987223, 1.985765, 
   1.984229, 1.982615, 1.980923, 1.979152, 1.977303, 1.975377, 1.973372, 1.971289, 1.969129, 1.966890, 
   1.964575, 1.962181, 1.959710, 1.957162, 1.954536, 1.951834, 1.949054, 1.946197, 1.943263, 1.940253, 
   1.937166, 1.934003, 1.930763, 1.927447, 1.924055, 1.920587, 1.917044, 1.913424, 1.909729, 1.905959, 
   1.902113, 1.898192, 1.894197, 1.890126, 1.885981, 1.881762, 1.877468, 1.873100, 1.868658, 1.864142, 
   1.859553, 1.854890, 1.850154, 1.845345, 1.840464, 1.835509, 1.830482, 1.825383, 1.820212, 1.814969, 
   1.809654, 1.804268, 1.798811, 1.793282, 1.787683, 1.782013, 1.776273, 1.770463, 1.764582, 1.758633, 
   1.752613, 1.746525, 1.740368, 1.734141, 1.727847, 1.721484, 1.715053, 1.708555, 1.701989, 1.695356, 
   1.688656, 1.681889, 1.675056, 1.668157, 1.661192, 1.654161, 1.647065, 1.639904, 1.632679, 1.625388, 
   1.618034, 1.610616, 1.603134, 1.595589, 1.587981, 1.580310, 1.572577, 1.564782, 1.556925, 1.549006, 
   1.541026, 1.532986, 1.524885, 1.516724, 1.508503, 1.500222, 1.491882, 1.483484, 1.475026, 1.466511, 
   1.457937, 1.449306, 1.440618, 1.431873, 1.423071, 1.414214, 1.405300, 1.396331, 1.387307, 1.378228, 
   1.369094, 1.359907, 1.350666, 1.341371, 1.332024, 1.322624, 1.313172, 1.303667, 1.294112, 1.284505, 
   1.274848, 1.265140, 1.255383, 1.245576, 1.235719, 1.225814, 1.215861, 1.205859, 1.195810, 1.185714, 
   1.175571, 1.165381, 1.155145, 1.144864, 1.134538, 1.124167, 1.113751, 1.103292, 1.092789, 1.082243, 
   1.071654, 1.061022, 1.050349, 1.039635, 1.028879, 1.018083, 1.007246, 0.996370, 0.985455, 0.974500, 
   0.963507, 0.952476, 0.941408, 0.930302, 0.919160, 0.907981, 0.896766, 0.885516, 0.874232, 0.862912, 
   0.851559, 0.840171, 0.828751, 0.817298, 0.805813, 0.794296, 0.782747, 0.771168, 0.759558, 0.747918, 
   0.736249, 0.724551, 0.712824, 0.701069, 0.689286, 0.677476, 0.665639, 0.653776, 0.641887, 0.629973, 
   0.618034, 0.606071, 0.594083, 0.582072, 0.570039, 0.557982, 0.545904, 0.533804, 0.521683, 0.509541, 
   0.497380, 0.485198, 0.472998, 0.460779, 0.448542, 0.436286, 0.424014, 0.411725, 0.399420, 0.387099, 
   0.374763, 0.362412, 0.350046, 0.337667, 0.325274, 0.312869, 0.300451, 0.288022, 0.275581, 0.263129, 
   0.250666, 0.238194, 0.225713, 0.213222, 0.200723, 0.188217, 0.175702, 0.163181, 0.150654, 0.138120, 
   0.125581, 0.113037, 0.100489, 0.087936, 0.075380, 0.062822, 0.050260, 0.037697, 0.025132, 0.012566, 
   0.000000, -0.012566, -0.025132, -0.037697, -0.050260, -0.062822, -0.075380, -0.087936, -0.100489, -0.113037, 
   -0.125581, -0.138120, -0.150654, -0.163181, -0.175702, -0.188217, -0.200723, -0.213222, -0.225713, -0.238194, 
   -0.250666, -0.263129, -0.275581, -0.288022, -0.300451, -0.312869, -0.325274, -0.337667, -0.350046, -0.362412, 
   -0.374763, -0.387099, -0.399420, -0.411725, -0.424014, -0.436286, -0.448542, -0.460779, -0.472998, -0.485198, 
   -0.497380, -0.509541, -0.521683, -0.533804, -0.545904, -0.557982, -0.570039, -0.582072, -0.594083, -0.606071, 
   -0.618034, -0.629973, -0.641887, -0.653776, -0.665639, -0.677476, -0.689286, -0.701069, -0.712824, -0.724551, 
   -0.736249, -0.747918, -0.759558, -0.771168, -0.782747, -0.794296, -0.805813, -0.817298, -0.828751, -0.840171, 
   -0.851559, -0.862912, -0.874232, -0.885516, -0.896766, -0.907981, -0.919160, -0.930302, -0.941408, -0.952476, 
   -0.963507, -0.974500, -0.985455, -0.996370, -1.007246, -1.018083, -1.028879, -1.039635, -1.050349, -1.061022, 
   -1.071654, -1.082243, -1.092789, -1.103292, -1.113751, -1.124167, -1.134538, -1.144864, -1.155145, -1.165381, 
   -1.175571, -1.185714, -1.195810, -1.205859, -1.215861, -1.225814, -1.235719, -1.245576, -1.255383, -1.265140, 
   -1.274848, -1.284505, -1.294112, -1.303667, -1.313172, -1.322624, -1.332024, -1.341371, -1.350666, -1.359907, 
   -1.369094, -1.378228, -1.387307, -1.396331, -1.405300, -1.414214, -1.423071, -1.431873, -1.440618, -1.449306, 
   -1.457937, -1.466511, -1.475026, -1.483484, -1.491882, -1.500222, -1.508503, -1.516724, -1.524885, -1.532986, 
   -1.541026, -1.549006, -1.556925, -1.564782, -1.572577, -1.580310, -1.587981, -1.595589, -1.603134, -1.610616, 
   -1.618034, -1.625388, -1.632679, -1.639904, -1.647065, -1.654161, -1.661192, -1.668157, -1.675056, -1.681889, 
   -1.688656, -1.695356, -1.701989, -1.708555, -1.715053, -1.721484, -1.727847, -1.734141, -1.740368, -1.746525, 
   -1.752613, -1.758633, -1.764582, -1.770463, -1.776273, -1.782013, -1.787683, -1.793282, -1.798811, -1.804268, 
   -1.809654, -1.814969, -1.820212, -1.825383, -1.830482, -1.835509, -1.840464, -1.845345, -1.850154, -1.854890, 
   -1.859553, -1.864142, -1.868658, -1.873100, -1.877468, -1.881762, -1.885981, -1.890126, -1.894197, -1.898192, 
   -1.902113, -1.905959, -1.909729, -1.913424, -1.917044, -1.920587, -1.924055, -1.927447, -1.930763, -1.934003, 
   -1.937166, -1.940253, -1.943263, -1.946197, -1.949054, -1.951834, -1.954536, -1.957162, -1.959710, -1.962181, 
   -1.964575, -1.966890, -1.969129, -1.971289, -1.973372, -1.975377, -1.977303, -1.979152, -1.980923, -1.982615, 
   -1.984229, -1.985765, -1.987223, -1.988602, -1.989902, -1.991124, -1.992267, -1.993332, -1.994318, -1.995225, 
   -1.996053, -1.996803, -1.997474, -1.998066, -1.998579, -1.999013, -1.999368, -1.999645, -1.999842, -1.999961, 
   -2.000000, -1.999961, -1.999842, -1.999645, -1.999368, -1.999013, -1.998579, -1.998066, -1.997474, -1.996803, 
   -1.996053, -1.995225, -1.994318, -1.993332, -1.992267, -1.991124, -1.989902, -1.988602, -1.987223, -1.985765, 
   -1.984229, -1.982615, -1.980923, -1.979152, -1.977303, -1.975377, -1.973372, -1.971289, -1.969129, -1.966890, 
   -1.964575, -1.962181, -1.959710, -1.957162, -1.954536, -1.951834, -1.949054, -1.946197, -1.943263, -1.940253, 
   -1.937166, -1.934003, -1.930763, -1.927447, -1.924055, -1.920587, -1.917044, -1.913424, -1.909729, -1.905959, 
   -1.902113, -1.898192, -1.894197, -1.890126, -1.885981, -1.881762, -1.877468, -1.873100, -1.868658, -1.864142, 
   -1.859553, -1.854890, -1.850154, -1.845345, -1.840464, -1.835509, -1.830482, -1.825383, -1.820212, -1.814969, 
   -1.809654, -1.804268, -1.798811, -1.793282, -1.787683, -1.782013, -1.776273, -1.770463, -1.764582, -1.758633, 
   -1.752613, -1.746525, -1.740368, -1.734141, -1.727847, -1.721484, -1.715053, -1.708555, -1.701989, -1.695356, 
   -1.688656, -1.681889, -1.675056, -1.668157, -1.661192, -1.654161, -1.647065, -1.639904, -1.632679, -1.625388, 
   -1.618034, -1.610616, -1.603134, -1.595589, -1.587981, -1.580310, -1.572577, -1.564782, -1.556925, -1.549006, 
   -1.541026, -1.532986, -1.524885, -1.516724, -1.508503, -1.500222, -1.491882, -1.483484, -1.475026, -1.466511, 
   -1.457937, -1.449306, -1.440618, -1.431873, -1.423071, -1.414214, -1.405300, -1.396331, -1.387307, -1.378228, 
   -1.369094, -1.359907, -1.350666, -1.341371, -1.332024, -1.322624, -1.313172, -1.303667, -1.294112, -1.284505, 
   -1.274848, -1.265140, -1.255383, -1.245576, -1.235719, -1.225814, -1.215861, -1.205859, -1.195810, -1.185714, 
   -1.175571, -1.165381, -1.155145, -1.144864, -1.134538, -1.124167, -1.113751, -1.103292, -1.092789, -1.082243, 
   -1.071654, -1.061022, -1.050349, -1.039635, -1.028879, -1.018083, -1.007246, -0.996370, -0.985455, -0.974500, 
   -0.963507, -0.952476, -0.941408, -0.930302, -0.919160, -0.907981, -0.896766, -0.885516, -0.874232, -0.862912, 
   -0.851559, -0.840171, -0.828751, -0.817298, -0.805813, -0.794296, -0.782747, -0.771168, -0.759558, -0.747918, 
   -0.736249, -0.724551, -0.712824, -0.701069, -0.689286, -0.677476, -0.665639, -0.653776, -0.641887, -0.629973, 
   -0.618034, -0.606071, -0.594083, -0.582072, -0.570039, -0.557982, -0.545904, -0.533804, -0.521683, -0.509541, 
   -0.497380, -0.485198, -0.472998, -0.460779, -0.448542, -0.436286, -0.424014, -0.411725, -0.399420, -0.387099, 
   -0.374763, -0.362412, -0.350046, -0.337667, -0.325274, -0.312869, -0.300451, -0.288022, -0.275581, -0.263129, 
   -0.250666, -0.238194, -0.225713, -0.213222, -0.200723, -0.188217, -0.175702, -0.163181, -0.150654, -0.138120, 
   -0.125581, -0.113037, -0.100489, -0.087936, -0.075380, -0.062822, -0.050260, -0.037697, -0.025132, -0.012566, 
};

